#### 스프링 웹 프레임워크

- 스프링은 유연성과 확장성, 다양성에 무게를 두고있는 프레임워크다
- 스프링의 웹 기술은 MVC 아키텍처를 근간으로 하고있다.
- 프레젠테이션 계층의 정보를 담은 모델 + 화면 출력 로직을 담은 뷰 + 제어로직을 담은 컨트롤러
- 프론트 컨트롤러 패턴 : 중앙집중형 컨트롤러가(DispatcherServlet) 서버로 들어오는 모든 요청을 먼저 받아서 처리한다.

#### HTTP 요청에서 HTTP 응답까지

1. HTTP 요청
2. DispatcherServlet의 HTTP 요청 접수 (url-pattern 체크)
    - 서블릿 컨테이너는 HTTP 요청이 DispatcherServlet에 할당된 것이면 요청 정보를 DispatcherServlet에 전달해준다.
    - 모든 요청에 공통적으로 진행하는 전처리 작업을 수행 (보안, 한글 디코딩)
3. 컨트롤러로 HTTP 요청 위임
    - 핸들러 매핑 전략을 이용해서 어떤 컨트롤러에 작업을 위임할지 결정한다.
    - 특정 컨트롤러를 호출해야 할 떄는 해당 컨트롤러 타입을 지원하는 어댑터를 껴서 컨트롤러 오브젝트의 메소드를 호출한다.
    - 어뎁터는 컨트롤러에 맞는 호출 방법을 이용해서 컨트롤러에 요청을 보내고 결과를 DispatcherServlet에 다시 돌려준다.
    - DistpatcherServlet(HttpServletRequest) => HandlerAdapter => Controller => HandlerAdapter => DispatcherServlet
4. 컨트롤러의 모델 생성과 정보 등록
    - 컨트롤러 : 비즈니스 로직을 수행하도록 서비스 계층 오브젝트에게 작업 위임 + 결과로 모델 생성 + 사용할 뷰를 결정
    - 컨트롤러는 모델을 생성하고 모델에 정보를 넣어준다.(이름과 오브젝트의 값의 쌍)
5. 컨트롤러의 결과 리턴 : 모델과 뷰
    - 뷰에 대한 정보(이름) 리턴
    - ViewResolver가 리턴받은 정보를 이용해 뷰 오브젝트 생성
6. DispatcherServlet의 뷰 호출과 모델 참조
    - 뷰 오브젝트에게 모델 전달
    - 최종 결과물을 생성해달라고 요청(동적 데이터 등)
    - 최종 결과물은 HttpServletResponse 오브젝트 안에 담긴다.
7. HTTP 응답 돌려주기
    - 후처리기가 있다면 추속 작업 진행
    - 최종 결과를 서블릿 컨테이너에게 돌려준다.

#### DispatcherServlet의 DI 가능한 전략

- HandlerMapping : Url과 요청 정보를 기준으로 어떤 컨트롤러를 사용할 것인지 결정하는 로직 담당
- HandlerAdapter : 핸들러 매핑으로 선택한 컨트롤러를 DispatcherServlet이 호출할 때 사용.
- HandlerExceptionResolver : 예외가 발생했을 때 처리하는 로직을 갖고 있다.
- ViewResolver : 뷰 이름을 참고해서 뷰 오브젝트를 찾아주는 로직을 가진 전략 오브젝트
- LocaleResolver : 지역정보를 결정해주는 전략이다. 기본으로 HTTP헤더의 정보를 보고 지역정보를 설정해준다.
- ThemeResolver : 테마 정보를 결정해주는 전략
- RequestToViewNameTranslator : 컨트롤러가 뷰나 뷰 이름을 주지 않았을 때 요청정보를 참고해서 자동으로 뷰 이름을 생성해주는 전략이다.
